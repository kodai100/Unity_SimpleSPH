#pragma kernel DensityCS
#pragma kernel ForceCS
#pragma kernel IntegrateCS

#define THREAD_SIZE_X 1024

struct Particle {
	float2 position;
	float2 velocity;
};

struct ParticleForces {
	float2 acceleration;
};

struct ParticleDensity {
	float density;
};

StructuredBuffer  <Particle>        _ParticlesBufferRead;
RWStructuredBuffer<Particle>        _ParticlesBufferWrite;

StructuredBuffer  <ParticleDensity> _ParticlesDensityBufferRead;
RWStructuredBuffer<ParticleDensity> _ParticlesDensityBufferWrite;

StructuredBuffer  <ParticleForces>  _ParticlesForceBufferRead;
RWStructuredBuffer<ParticleForces>  _ParticlesForceBufferWrite;

cbuffer CB {
	int   _NumParticles;
	float _TimeStep;
	float _Smoothlen;
	float _PressureStiffness;
	float _RestDensity;
	float _DensityCoef;
	float _GradPressureCoef;
	float _LapViscosityCoef;
	float _WallStiffness;
	float _Viscosity;
	float2 _Gravity;
	float2 _Range;
	float3 _MousePos;
	float _Radius;
	bool _MouseDown;
};


//--------------------------------------------------------------------------------------
// Density Calculation
//--------------------------------------------------------------------------------------
float CalculateDensity(float r_sq) {
	const float h_sq = _Smoothlen * _Smoothlen;

	// Poly6 Kernel の実装
	// See : http://www.slis.tsukuba.ac.jp/~fujisawa.makoto.fu/cgi-bin/wiki/index.php?SPH%CB%A1%A4%CE%BD%C5%A4%DF%B4%D8%BF%F4
	// W_poly6(r, h) = DensityCoef * (h^2 - r^2)^3
	// -> DensityCoef = ParticleMass * 4 / (PI * Smoothlen^8)
	return _DensityCoef * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
}

[numthreads(THREAD_SIZE_X, 1, 1)]
void DensityCS(uint3 DTid : SV_DispatchThreadID) {
	uint P_ID = DTid.x;	// 現在処理しているパーティクルID

	float h_sq = _Smoothlen * _Smoothlen;
	float2 P_position = _ParticlesBufferRead[P_ID].position;

	float density = 0;

	for (uint N_ID = 0; N_ID < _NumParticles; N_ID++) {

		// 自身を計算対象とした場合はじく
		if (N_ID == P_ID) continue;

		float2 N_position = _ParticlesBufferRead[N_ID].position;

		float2 diff = N_position - P_position;
		float r_sq = dot(diff, diff);
		if (r_sq < h_sq) {
			density += CalculateDensity(r_sq);
		}
	}

	_ParticlesDensityBufferWrite[P_ID].density = max(density, _RestDensity);	// max大事
}


//--------------------------------------------------------------------------------------
// Force Calculation
//--------------------------------------------------------------------------------------
float CalculatePressure(float density) {
	// Becker2007 非圧縮条件の実装:
	// Pressure = B * ((rho / rho_0)^gamma  - 1)
	// 圧力定数Bは正確に計算するべきだが、リアルタイム向きではないので適当な値にする
	return _PressureStiffness * max(pow(density / _RestDensity, 7) - 1, 0);
}

float2 CalculateGradPressure(float r, float P_pressure, float N_pressure, float N_density, float2 diff) {
	const float h = _Smoothlen;
	float avg_pressure = 0.5f * (N_pressure + P_pressure);
	// Implements this equation:
	// mass * (pressure_i- pressure_j)/(2 * density_j) * Grad(W_Spiky)
	// Grad(W_Spiky) = -30 / (pi * h^5) * (h - r)^2
	return _GradPressureCoef * avg_pressure / N_density * (h - r) * (h - r) / r * (diff);
}

float2 CalculateLapVelocity(float r, float2 P_velocity, float2 N_velocity, float N_density) {
	const float h = _Smoothlen;
	float2 vel_diff = (N_velocity - P_velocity);
	// Implements this equation:
	// mass * (u_j - u_i) / density_j * Laplacian(W_viscosity)
	// Laplacian(W_viscosity) = 20 / (3 * pi * h^5) * (h - r)
	return _LapViscosityCoef / N_density * (h - r) * vel_diff;
}

[numthreads(THREAD_SIZE_X, 1, 1)]
void ForceCS(uint3 DTid : SV_DispatchThreadID) {
	uint P_ID = DTid.x; // 現在処理しているパーティクルID

	float2 P_position = _ParticlesBufferRead[P_ID].position;
	float2 P_velocity = _ParticlesBufferRead[P_ID].velocity;

	float  P_density = _ParticlesDensityBufferRead[P_ID].density;	// 先程算出した密度

	float  P_pressure = CalculatePressure(P_density);	// 圧力の計算

	const float h_sq = _Smoothlen * _Smoothlen;

	float2 press = float2(0, 0);
	float2 visco = float2(0, 0);

	for (uint N_ID = 0; N_ID < _NumParticles; N_ID++) {
		if (N_ID == P_ID) continue;

		float2 N_position = _ParticlesBufferRead[N_ID].position;

		float2 diff = N_position - P_position;
		float r_sq = dot(diff, diff);
		if (r_sq < h_sq) {
			float2 N_velocity = _ParticlesBufferRead[N_ID].velocity;
			float  N_density = _ParticlesDensityBufferRead[N_ID].density;
			float  N_pressure = CalculatePressure(N_density);	// 計算が無駄だけど
			float  r = sqrt(r_sq);

			// Pressure Term
			press += CalculateGradPressure(r, P_pressure, N_pressure, N_density, diff);

			// Viscosity Term
			visco += CalculateLapVelocity(r, P_velocity, N_velocity, N_density);
		}
	}

	float2 force = press + _Viscosity * visco;

	_ParticlesForceBufferWrite[P_ID].acceleration = force / P_density;
}

[numthreads(THREAD_SIZE_X, 1, 1)]
void IntegrateCS(uint3 DTid : SV_DispatchThreadID) {
	const unsigned int P_ID = DTid.x; // 現在処理しているパーティクルID

	// 更新前の位置と速度
	float2 position = _ParticlesBufferRead[P_ID].position;
	float2 velocity = _ParticlesBufferRead[P_ID].velocity;

	float2 acceleration = _ParticlesForceBufferRead[P_ID].acceleration;	// 計算した加速度

	// マウスインタラクション
	if (distance(position, _MousePos.xy) < _Radius && _MouseDown) {
		float2 dir = position - _MousePos.xy;
		float pushBack = _Radius-length(dir);
		acceleration += 100 * pushBack * normalize(dir);
	}

	// 壁境界(ペナルティ法)
	float dist = dot(float3(position, 1), float3(1, 0, 0));
	acceleration += min(dist, 0) * -_WallStiffness * float2(1, 0);

	dist = dot(float3(position, 1), float3(0, 1, 0));
	acceleration += min(dist, 0) * -_WallStiffness * float2(0, 1);

	dist = dot(float3(position, 1), float3(-1, 0, _Range.x));
	acceleration += min(dist, 0) * -_WallStiffness * float2(-1, 0);

	dist = dot(float3(position, 1), float3(0, -1, _Range.y));
	acceleration += min(dist, 0) * -_WallStiffness * float2(0, -1);

	// 重力の加算
	acceleration += _Gravity;

	// 前進オイラー法で次の粒子位置を更新
	velocity += _TimeStep * acceleration;

	// 速度制限を掛ける場合
	/*if (length(velocity) > sqrt(2 * length(_Gravity) * _Smoothlen)) {
		velocity = sqrt(2 * length(_Gravity) * _Smoothlen) * normalize(velocity);
	}*/

	position += _TimeStep * velocity;

	// バッファ更新
	_ParticlesBufferWrite[P_ID].position = position;
	_ParticlesBufferWrite[P_ID].velocity = velocity;
}
